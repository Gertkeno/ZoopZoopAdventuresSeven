const w4 = @import("wasm4.zig");
const std = @import("std");
const Zoop = @import("Zoopzoop.zig");

const Self = @This();

pub const width = 32;
pub const height = 32;

x: i32 = 56,
y: i32 = 56,

direction_x: i32 = 1,
direction_y: i32 = 0,

pub fn update(self: *Self, rng: std.rand.Random) void {
    // moving dick
    //// variables for direction !!!
    //// adding the direction to dick position !!!
    self.x += self.direction_x;
    self.y += self.direction_y;

    // hitable walls !!!
    // copy the zoop wall collision detection !!!

    // left-right X axis
    if (self.x > 160 - width) {
        //// bounce!
        self.direction_x = -1;
        //// randomize the direction
        self.direction_y = rng.intRangeAtMost(i32, -1, 1);
        self.x = 160 - width;
    } else if (self.x < 0) {
        self.direction_x = 1;
        self.direction_y = rng.intRangeAtMost(i32, -1, 1);
        self.x = 1;
    }

    // up-down Y axis
    if (self.y > 160 - height + 7) {
        self.direction_y = -1;
        self.direction_x = rng.intRangeAtMost(i32, -1, 1);
        self.y = 160 - height + 7;
    } else if (self.y < -7) {
        self.direction_y = 1;
        self.direction_x = rng.intRangeAtMost(i32, -1, 1);
        self.y = -7;
    }

    // hit zoop, KILL ZOOP
    //// stinger ouch!
    //// new variable for stunned state
    //// if statment to not move

    // draw
    w4.DRAW_COLORS.* = 0x4230;
    w4.blit(&DICK_ART, self.x, self.y, width, height, w4.BLIT_2BPP);
}

const niceness = 6;
pub fn collides(self: Self, zoop: Zoop) bool {
    if (zoop.x + zoop.width < self.x + niceness) {
        return false;
    } else if (zoop.x > self.x + width - niceness) {
        return false;
    }

    if (zoop.y + zoop.height < self.y + niceness) {
        return false;
    } else if (zoop.y > self.y + height - niceness) {
        return false;
    }
    return true;
}

const DICK_ART = [256]u8{ 0x00, 0x00, 0x01, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xa9, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xaa, 0x40, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0xa6, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x9a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x46, 0x7a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xaa, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x56, 0xaa, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xaa, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0xaa, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xaa, 0x44, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0xa9, 0x54, 0x00, 0x00, 0x41, 0x55, 0x55, 0x15, 0xfd, 0x50, 0x00, 0x00, 0x14, 0xd5, 0x55, 0x05, 0x75, 0x40, 0x00, 0x00, 0x50, 0x55, 0x55, 0x05, 0x75, 0x55, 0x55, 0x55, 0x40, 0x01, 0x95, 0x56, 0xfe, 0xaa, 0xaa, 0xa6, 0x40, 0x01, 0x95, 0xa6, 0xfa, 0xaa, 0xaa, 0x96, 0x40, 0x01, 0x95, 0xa6, 0xfa, 0xaa, 0x95, 0x5a, 0x40, 0x01, 0x6a, 0xa6, 0xfa, 0xaa, 0xaa, 0x5a, 0x40, 0x00, 0x5a, 0xa6, 0xba, 0xa6, 0xa5, 0x69, 0x40, 0x00, 0x15, 0x55, 0xba, 0xa5, 0x56, 0xa9, 0x00, 0x00, 0x00, 0x01, 0xaa, 0xaa, 0xaa, 0xa5, 0x00, 0x00, 0x00, 0x01, 0xaa, 0xaa, 0xaa, 0x94, 0x00, 0x00, 0x00, 0x01, 0x6a, 0xaa, 0xa9, 0x50, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0xa5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x41, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x01, 0x50, 0x00, 0x00, 0x00, 0x00, 0x01, 0x5d, 0x05, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x05, 0xfd, 0x1f, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55, 0x15, 0x50, 0x00, 0x00 };
